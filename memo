オブジェクト
 - データと機能をまとめたもの

プロパティ
  - オブジェクトのデータに相当

メソッド
 - オブジェクトの機能に相当

// オブジェクトの生成
const 変数 = {
    プロパティやメソッド
};

// Objectからインスタンスオブジェクトを作成
const obj = new Object(); //あまり使わない

//複数のプロパティ
const color = {
    // それぞれのプロパティは`,`で区切る
    red: "red",
    green: "green",
    blue: "blue"
};

//プロパティへのアクセス
const obj = {
  key: 'value'
};
ドット記法
console.log(obj.key); // => "value"
ブラケット記法
console.log(obj["key"]); // => "value"

const languages = {
  ja: '日本語',
  en: '英語'
};
//分割代入で定義
const {ja, en} = languages;
console.log(ja);
console.log(en);

// Window, Documentオブジェクト
windowオブジェクト 省略可 = {
  
  consoleプロパティ : {
    log()メソッド {...},
  },

  alert()メソッド{...},

  documentオブジェクト: {
    getElementByID(){...},
  }
};



// 変数
const 再代入× 再定義× →定数ではない→オブジェクトの中身は変更できるため
let 再代入◯ 再定義×
var 再代入◯ 再定義◯



//配列
const array = [];
const numbers = [1, 2, 3];
//配列の配列
const matrix = [
  ['a', 'b'],
  ['c', 'd']
];



// 関数の定義
  function 関数名(仮引数1, 仮引数2) {
    処理
    return 関数の返り値
  }

//関数の呼び出し
const 関数の結果 = 関数名(引数1, 引数2);

//関数の呼び出し
関数名();

//this

//コールバック関数 →引数に関数を渡す 関数の中で関数を実行する
function 高階関数(コールバック関数) {
  コールバック関数();
}
例
function unfloow() {
  console.log('フォローを外しました');
}
function cancelTweet() {
  console.log('ツイートをキャンセルしました')
}
function confirmed(fn) {
  if(window.confirm("実行しますか?")) {
    fn();
  }
}
confirmed(unfloow);

// 関数式  匿名関数
const 関数名 = function() {
    // 関数を呼び出したときの処理
    // ...
    return 関数の返り値;
};
// 関数式は変数名で参照できるため、"関数名"を省略できる
const 変数名 = function() {
};
例
const unfollow = function () {
  console.log('フォローを外しました');
}
const cancelTweet = function () {
  console.log('ツイートをキャンセルしました')
}
function confirmed(fn) {
  if(window.confirm("実行しますか?")) {
    fn();
  }
}
confirmed(cancelTweet);

// 関数宣言では"関数名"は省略できない
function 関数名() {
}

// アロー関数
const 関数名 = (引数) => {
  return 処理
}
//アロー関数の場合、thisで束縛



//EventTarget.addEventListener()
イベント

//Document.querySelector()
//Document.querySelectorAll()

//Element.classList
classList.add
classList.remove
classList.toggle→追加削除の切り替え

//getElementByID
//Array.prototype.forEach()
//Element.closest()
//Document.createElement()
//HTMLElement.innerText
//Node.textContent
//Node.appendChild

//lengthプロパティ
const array = ["one", "two", "three"];
console.log(array.length); //要素の数取得
console.log(array[array.length - 1]); //要素の数 - 1 = 最後の要素
//末尾に追加→push() 先頭に追加→unshift()
//末尾から削除→pop() 先頭から削除→shift()



//Spread構文
function fn(x, y, z) {
  console.log(x);
  console.log(y);
  console.log(z);
}

const array =[1, 2, 3];
fn(...array);




// typeof演算子
データ型の確認
ex.
console.log(typeof true);
console.log(typeof "JavaScript");

// テンプレートリテラル
const str = '文字列';
console.log(`これは${str}です`);


