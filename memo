オブジェクト
 - データと機能をまとめたもの

プロパティ
  - オブジェクトのデータに相当

メソッド
 - オブジェクトの機能に相当


// オブジェクトの生成
const 変数 = {
    プロパティやメソッド
};

// Objectからインスタンスオブジェクトを作成
const obj = new Object(); //あまり使わない

//複数のプロパティ
const color = {
    // それぞれのプロパティは`,`で区切る
    red: "red",
    green: "green",
    blue: "blue"
};

//プロパティへのアクセス
const obj = {
  key: 'value'
};
ドット記法
console.log(obj.key); // => "value"
ブラケット記法
console.log(obj["key"]); // => "value"

const languages = {
  ja: '日本語',
  en: '英語'
};
//分割代入で定義
const {ja, en} = languages;
console.log(ja);
console.log(en);



// Window, Documentオブジェクト
windowオブジェクト 省略可 = {
  
  consoleプロパティ : {
    log()メソッド {...},
  },

  alert()メソッド{...},

  documentオブジェクト: {
    getElementByID(){...},
  }
};



// 変数
const 再代入× 再定義× →定数ではない→オブジェクトの中身は変更できるため
let 再代入◯ 再定義×
var 再代入◯ 再定義◯



//配列
const array = [];

const numbers = [1, 2, 3];
//配列の配列
const matrix = [
  ['a', 'b'],
  ['c', 'd']
];
//lengthプロパティ
const array = ["one", "two", "three"];
console.log(array.length); //要素の数取得
console.log(array[array.length - 1]); //要素の数 - 1 = 最後の要素


//分割代入
const array = [1, 2];
const [a, b] = array;
console.log(array[0]);

const array = [1, 2]; //これと同じ結果
const a = array[0];
const b = array[1];

const obj = {
  key: "value"
};
const { key } = obj; //オブジェクトの生成は{ }で囲む
console.log(key);

const obj = {         //これと同じ結果
    "key": "value"
};
const key = obj.key;



// 関数の構文
  function 関数名(仮引数1, 仮引数2) {
    処理
    return 関数の返り値
  }

// 関数の呼びだし
const 関数の結果 = 関数名(引数1, 引数2);
console.log(関数の結果);

// 関数式
const 関数名 = function() {
    // 関数を呼び出したときの処理
    // ...
    return 関数の返り値;
};
// 関数式は変数名で参照できるため、"関数名"を省略できる
const 変数名 = function() {
};
// 関数宣言では"関数名"は省略できない
function 関数名() {
}



//デフォルト引数
function 関数名(仮引数1 = デフォルト値1, 仮引数2 = デフォルト値2) {

}

//可変長引数→引数が固定ではなく任意の個数

//残余引数
function num(...args) {
  console.log(args);
}
num(1, 2, 3);

//Spread構文
function fn(x, y, z) {
  console.log(x);
  console.log(y);
  console.log(z);
}

const array =[1, 2, 3];
fn(...array);



//if文
if (条件式) {
    実行する文;
}

//switch文 //break文でswitch文から抜ける
switch (式) {
  case ラベル1:
      // `式`の評価結果が`ラベル1`と一致する場合に実行する文
      break;
  case ラベル2:
      // `式`の評価結果が`ラベル2`と一致する場合に実行する文
      break;
  default:
      // どのcaseにも該当しない場合の処理
      break;
}



//while文
while (条件式) {
    実行する文;
}

//for文
for (初期化式; 条件式; 増分式) {
    実行する文;
}




// typeof演算子
データ型の確認
ex.
console.log(typeof true);
console.log(typeof "JavaScript");

// テンプレートリテラル
const str = '文字列';
console.log(`これは${str}です`);
