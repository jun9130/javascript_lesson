オブジェクト
 - データと機能をまとめたもの

プロパティ
  - オブジェクトのデータに相当

メソッド
 - オブジェクトの機能に相当


// オブジェクトの生成
const 変数 = {
    プロパティやメソッド
};
const obj = {
  key: 'value'
};
// ドット記法
console.log(obj.key); // => "value"
// ブラケット記法
console.log(obj["key"]); // => "value"



// Window, Documentオブジェクト
windowオブジェクト 省略可 = {
  
  consoleプロパティ : {
    log()メソッド {...},
  },

  alert()メソッド{...},

  documentオブジェクト: {
    getElementByID(){...},
  }
};



// 変数
const 再代入× 再定義× →定数ではない→オブジェクトの中身は変更できるため
let 再代入◯ 再定義×
var 再代入◯ 再定義◯



//配列
const array = [];



//分割代入
const array = [1, 2];
const [a, b] = array;
console.log(array[0]);

const array = [1, 2]; //これと同じ結果
const a = array[0];
const b = array[1];

const obj = {
  key: "value"
};
const { key } = obj; //オブジェクトの生成は{ }で囲む
console.log(key);

const obj = {         //これと同じ結果
    "key": "value"
};
const key = obj.key;



// 関数の構文
  function 関数名(仮引数1, 仮引数2) {
    処理
    return 関数の返り値
  }

// 関数の呼びだし
const 関数の結果 = 関数名(引数1, 引数2);
console.log(関数の結果);



//デフォルト引数
function 関数名(仮引数1 = デフォルト値1, 仮引数2 = デフォルト値2) {

}



// typeof演算子
データ型の確認
ex.
console.log(typeof true);
console.log(typeof "JavaScript");

// テンプレートリテラル
const str = '文字列';
console.log(`これは${str}です`);
